# 1. استيراد المكتبات
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
import matplotlib.pyplot as plt

# 2. بناء نموذج CNN
model = Sequential([
    # الطبقة الأولى: الالتفاف (Convolutional Layer)
    Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)), # 32 مرشحًا، حجم 3x3
    MaxPooling2D(pool_size=(2, 2)),  # طبقة التجميع

    # الطبقة الثانية: الالتفاف
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(pool_size=(2, 2)),

    # الطبقة الثالثة: الالتفاف
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D(pool_size=(2, 2)),

    # تحويل البيانات إلى شكل مسطح
    Flatten(),

    # طبقة كاملة الاتصال
    Dense(128, activation='relu'),
    Dropout(0.5),  # تقليل التعلم الزائد (Overfitting)

    # الطبقة الأخيرة: الإخراج
    Dense(5, activation='softmax')  # 5 فئات
])

# عرض ملخص النموذج
model.summary()

# 3. تجميع النموذج
model.compile(
    optimizer='adam',                  # خوارزمية تحسين
    loss='categorical_crossentropy',   # وظيفة الخسارة للفئات المتعددة
    metrics=['accuracy']               # قياس الأداء بالدقة
)

# 4. تدريب النموذج
history = model.fit(
    train_generator,                   # بيانات التدريب (يجب أن تكون قد أعددتها سابقًا)
    validation_data=val_generator,     # بيانات التحقق
    epochs=20,                         # عدد التكرارات (يمكنك تعديل الرقم)
    steps_per_epoch=len(train_generator), # عدد الخطوات في كل تكرار
    validation_steps=len(val_generator)   # عدد خطوات التحقق
)

# 5. حفظ النموذج
model.save('diabetic_retinopathy_model.h5')

# 6. عرض منحنيات التدريب
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Model Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()
